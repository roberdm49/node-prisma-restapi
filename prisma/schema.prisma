// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id String @id @default(uuid())
  name String
  createdAt DateTime @default(now())
  users User[]
  products Product[]
  productCompanies Company[]
  dailySales DailySale[]
}

model User {
  id String @id @default(uuid())
  username String @unique
  password String
  firstname String
  lastname String
  createdAt DateTime @default(now())
  tenantId String
  tenant Tenant @relation(fields: [tenantId], references: [id])
  // auth_strategy String?
}

model Product {
  id String @id @default(uuid())
  name String
  description String?
  price Float
  stock Int? @default(0)
  barCode String?
  tenantId String
  tenant Tenant @relation(fields: [tenantId], references: [id])
  companyId String?
  company Company? @relation(fields: [companyId], references: [id])
  currencyId Int
  currency Currency @relation(fields: [currencyId], references: [id])
  productsHistory ProductHistory[]
  latestProductHistoryId String
}

model ProductHistory {
  id String @id @default(uuid())
  name String
  description String?
  price Float
  stock Int?
  barCode String?
  tenantId String
  companyId String?
  currencyId Int
  modificationTimestamp DateTime @default(now())
  purchasedItems PurchasedItem[]
  productId String
  product Product @relation(fields: [productId], references: [id])
}

model Company {
  id String @id @default(uuid())
  name String
  createdAt DateTime @default(now())
  products Product[]
  tenantId String
  tenant Tenant @relation(fields: [tenantId], references: [id])
}

model DailySale {
  id String @id @default(uuid())
  saleDate DateTime @default(now())
  closed Boolean @default(false)
  tenantId String
  tenant Tenant @relation(fields: [tenantId], references: [id])
  purchases Purchase[]
}

model Purchase {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  dailySaleId String
  dailySale DailySale @relation(fields: [dailySaleId], references: [id])
  purchasedItems PurchasedItem[]
}

model PurchasedItem {
  id String @id @default(uuid())
  quantity Int
  unitPrice Float
  purchaseId String
  purchase Purchase @relation(fields: [purchaseId], references: [id])
  productHistoryId String
  productHistory ProductHistory @relation(fields: [productHistoryId], references: [id])
  dailyExchangeRateId String
  dailyExchangeRate DailyExchangeRate @relation(fields: [dailyExchangeRateId], references: [id])
}

model Currency {
  id Int @id
  name String
  isoCode String
  isoNum String
  products Product[]
  dailyExchangeRates DailyExchangeRate[]
  latestExchangeRateId String?

  @@unique([name, isoCode, isoNum])
}

model DailyExchangeRate {
  id String @id @default(uuid())
  currencyValueUsd Float
  timestamp DateTime // should be a timestamp
  currencyId Int
  currency Currency @relation(fields: [currencyId], references: [id])
  purchasedItems PurchasedItem[]
}
